?readxl
library("readxl")
install.packages("readxl")
install.packages("readxl")
library("readxl")
getwd()
setwd("C:\\Users\\ari_b\\Documents\\Forage\\ANZ\\Task 2")
library(prettyunits)
detach("package:prettyunits", unload = TRUE)
getwd()
salary <- read_excel("ANZ synthesised transaction dataset (1)")
head(salary)
head(salary)
salary <- read_excel("ANZ synthesised transaction dataset (1)")
getwd()
salary <- read_excel("ANZ synthesised transaction dataset (1)")
salary <- read_excel("ANZ synthesised transaction dataset (1).xlsx")
head(salary)
dim(salary)
tail(salary)
str(salary)
levels(salary)
library(gapminder)
install.packages("gapminder")
library(gapminder)
convert(chr(currency))
gapminder%>% convert(chr(currency))
#library(gapminder)
#install.packages("gapminder")
#gapminder%>% convert(chr(currency))
typeof(salary)
typeof(salary$currency)
typeof(salary$amount)
typeof(salary$balance)
typeof(salary$date)
salary$date <- as.Date(salary$date, format="%Y-%m-%d")
salary$date <- as.Date(salary$date, format="%Y-%m-%d")
typeof(salary$date)
salary$date <- as.Date(salary$date, format="%d/%m/%Y")
typeof(salary$date)
ncol(salary)
ncol(salary)
salary$account <- factor(salary$account)
typeof(salary$account)
str(salary)
salary$first_name <- factor(salary$first_name)
typeof(salary$first_name)
str(salary)
typeof(salary$movement)
unique(salary$movement)
salary$total <- salary$amount + salary$balance
salary$total
is.na(salary$total)
unique(is.na(salary$total))
unique(is.na(salary$amount))
unique(salary$balance)
unique(is.na(salary$balance))
salary$annual_amount <- salary$total * 12
salary$annual_amount
unique(is.na(salary$annual_amount))
salary$annual_amount <- factor(salary$annual_amount)
str(salary)
salary$account
source('~/Forage/ANZ/Task 2/anz_task_2.R')
getwd()
?dplyr
library(dplyr)
install.packages("dplyr")
library(dplyr)
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(mean(.,na.rm=TRUE)))
typeof(salary)
typeof(salary$currency)
typeof(salary$amount)
typeof(salary$balance)
typeof(salary$date)
salary$date <- as.Date(salary$date, format="%d/%m/%Y")
salary$account <- factor(salary$account)
typeof(salary$account)
salary$first_name <- factor(salary$first_name)
typeof(salary$first_name)
typeof(salary$movement)
unique(salary$movement)
salary$total <- salary$amount + salary$balance
salary$total
unique(is.na(salary$total))
unique(is.na(salary$amount))
unique(is.na(salary$balance))
salary$annual_amount <- salary$total * 12
salary$annual_amount
unique(is.na(salary$annual_amount))
salary$annual_amount <- factor(salary$annual_amount)
str(salary)
salary$account
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(mean(.,na.rm=TRUE)))
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(sum(.,na.rm=TRUE)))
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(mean(.,na.rm=TRUE)))
summarise_at(group_by(salary, first_name), vars(annual_amount), fun=sum)
summarise_at(group_by(salary, first_name), vars(annual_amount), funs=sum)
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(sum))
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(sum(.,na.rm = TRUE)))
summarise_at(group_by(salary, first_name), vars(total), funs(sum(.,na.rm = TRUE)))
summarise_at(group_by(salary, first_name), vars(annual_amount), funs(sum(.,na.rm = TRUE)))
summarise_at(group_by(salary, first_name), vars(total), funs(sum(.,na.rm = TRUE)))
salary[salary$total
z]
salary[salary$total]
salary[,salary$total]
salary$total
group_by(first_name, total)
group_by(salary$first_name, salary$total)
a <- salary$annual_amount.group_by(salary$first_name)
salary$annual_amount
salary$total
tot_sal <- summarise_at(group_by(salary, first_name), vars(total), funs(sum(.,na.rm = TRUE)))
tot_sal
count(tot_sal)
unique(tot_sal)
annual_amount < tot_sal  *12
salary$annual_amount <- [salary$tot_sal  *12,]
salary[salary$tot_sal,]
salary$tot_sal <- summarise_at(group_by(salary, first_name), vars(total), funs(sum(.,na.rm = TRUE)))
tot_sal <- summarise_at(group_by(salary, first_name), vars(total), funs(sum(.,na.rm = TRUE)))
tot_sal
typeof(tot_sal)
annual_sal <- tot_sal * 12
annal_sal
annual_sal <- [i*12 for i in tot_sal]
annual_sal = [i*12 for i in tot_sal]
annual_sal = i*12 for i in tot_sal
lapply(tot_sal, "*", 12)
annual_sal
annual_sal <- NULL
annual_sal
#annual_sal = list()
#lapply(tot_sal, "*", 12)
#annual_sal
#annual_sal <- NULL
colnames(tot_sal)
annual_sal<-lapply(tot_sal$total, "*", 12)
annual_sal
typeof(tot_sal)
typeof(annual_sal)
#annual_sal = list()
#lapply(tot_sal, "*", 12)
#annual_sal
annual_sal <- NULL
annual_sal<-tot_sal$first_name,sapply(tot_sal$total, "*", 12)
annual_sal<-,tot_sal$first_name, lapply(tot_sal$total, "*", 12)
annual_sal<-tot_sal$first_name, lapply(tot_sal$total, "*", 12)
#annual_sal = list()
#lapply(tot_sal, "*", 12)
#annual_sal
#annual_sal <- NULL
colnames(salary)
tot_sal <- summarise_at(group_by(salary$first_name, salary$account), vars(salary$total), funs(sum(.,na.rm = TRUE)))
tot_sal <- summarise_at(group_by(first_name, account), vars(total), funs(sum(.,na.rm = TRUE)))
salary
ncol(tot_sal)
tot_sal
tot_sal <- summarise_at(group_by(salary, account), vars(total), funs(sum(.,na.rm = TRUE)))
tot_sal
ncol(tot_sal)
nrow(tot_sal)
is.unique(tot_sal)
unique(tot_sal)
typeof(tot_sal)
tot_sal$annual_salary <- tot_sal$total*12
ncol(tot_sal)
unique(tot_sal)
min(salary$age)
max(salary$age)
unique(salary$movement)
count(salary$movement=='debit')
count(salary$movement has 'debit')
count(salary$movement as 'debit')
count(salary$movement in 'debit')
count(salary$movement)
typeof(salary$movement)
typeof(salary$age)
name_age<-data.frame(salary$first_name, salary$age, na.rm=TRUE)
name_age
name_age<-data.frame(salary$first_name, salary$age)
is.na(name_age)
name_age<-data.frame(salary$first_name, salary$age)
name_age
unique(name_age)
is.na(name_age[,first_name])==TRUE
typeof(name_age)
print("does not contain null values")
if(is.na(name_age[,first_name])==TRUE)
print("has null values")
colnames(name_age)
if(is.na(name_age[,salary.first_name])==TRUE)
print("has null values")
print("is free of null values")
head(name_age)
salary$bpay_biller_code
unique(salary$bpay_biller_code)
install.packages("ggmap", "digest", "glue")
register_google(key="<google maps key>")
install.packages("ggmap", "digest", "glue")
install.packages("ggmap", "digest", "glue")
map=get_map(location=location1, zoom=15, scale=2)
map<-get_map(location=location1, zoom=15, scale=2)
getwd()
setwd("C:/Users/ari_b/Documents/Forage/ANZ/Task 1")
getwd()
#----------------
#Load data into R studio
install.packages("readxl")
library(readxl)
data_load=read_excel("ANZ synthesized transaction dataset.xlsx")
data_load=read_excel("dataset by anz.xlsx")
#Setup working directory
getwd()
data_load=read_xlsx("dataset by anz.xlsx")
data_load=read_excel("dataset by anz.xlsx")
data_load.head()
head(data_load)
nrow(data_load)
ncol(data_load)
str(data_load)
source('~/Forage/ANZ/Task 2/anz_task1_solution.R', echo=TRUE)
levels(data_load)
summary(data_load)
#-----------------
#Change date format in date column
data_load$date<-as.POSIXct(data_load$date, format="%d/%m/%Y %H:%M")
data_load$date
head(data_load$date)
data_load=read_excel("dataset by anz.xlsx")
#-----------------
#Change date format in date column
#data_load$date<-as.POSIXct(data_load$date, format="%d/%m/%Y %H:%M")
data_load$date=as.Date(data_load, format="%d/%m/%Y")
#-----------------
#Change date format in date column
#data_load$date<-as.POSIXct(data_load$date, format="%d/%m/%Y %H:%M")
data_load$date=as.Date(data_load$date, format="%d/%m/%Y")
head(data_load$date)
#Weekday and hour derivation attempt
data_load$extraction<-as.character(data_load$extraction)
data_load$day<-weekdays(data_load$date)
data_load$hour
data_load$hour<-hour(as.POSIXct
(substr
(data_load$extraction,12,19),
format="%H:%M:%S"))
data_load$hours<-hour(as.POSIXct
(substr
(data_load$extraction,12,19),
format="%H:%M:%S"))
#Weekday and hour derivation attempt
install.packages("lubridate")
library(lubridate)
data_load$hours<-hour(as.POSIXct
(substr
(data_load$extraction,12,19),
format="%H:%M:%S"))
data_load$day<-weekdays(data_load$date)
data_load$hour
data_load$hour
data_load$extraction<-as.character(data_load$extraction)
data_load$hours<-hour(as.POSIXct
(substr
(data_load$extraction,12,19),
format="%H:%M:%S"))
data_load$day<-weekdays(data_load$date)
data_load$hour
data_load$hour<-hour(as.POSIXct(substr(data_load$extraction,12,19), format="%H:%M:%S"))
data_load$day<-weekdays(data_load$date)
data_load$hour
data_load$day
#-----------------
#linking of customer account and id
data_load<-select(account, customer_id)
#-----------------
#linking of customer account and id
data_load>%>select(account, customer_id)>%>unique()>%>nrow()
#-----------------
#linking of customer account and id
colnames(data_load)
#data_load>%>select(account, customer_id)>%>unique()>%>nrow()
select(data_load$account, data_load$customer_id,unique())
#data_load>%>select(account, customer_id)>%>unique()>%>nrow()
unique(select(data_load$account, data_load$customer_id,))
#data_load>%>select(account, customer_id)>%>unique()>%>nrow()
select(data_load$account, data_load$customer_id)
#data_load>%>select(account, customer_id)>%>unique()>%>nrow()
nrow(unique(select(data_load$account, data_load$customer_id)))
